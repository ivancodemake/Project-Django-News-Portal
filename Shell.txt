1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

   >>> user_1 = User.objects.create_user(username="John")  
   >>> user_2 = User.objects.create_user(username="Anastasia")

2. Создать два объекта модели Author, связанные с пользователями.

   >>> Author.objects.create(user=user_1)   
      <Author: Author object (3)>
   >>> Author.objects.create(user=user_2) 
      <Author: Author object (4)>

Проверка имён авторов:

   >>> Author.objects.get(id=3).user         
      <User: John>
   >>> Author.objects.get(id=4).user 
      <User: Anastasia>

3. Добавить 4 категории в модель Category.

   >>> Category.objects.create(name_cat='IT')
      <Category: Category object (1)>
   >>> Category.objects.create(name_cat='Science')
      <Category: Category object (2)>
   >>> Category.objects.create(name_cat='Sport')   
      <Category: Category object (3)>
   >>> Category.objects.create(name_cat='Health')
      <Category: Category object (4)>

4. Добавить 2 статьи и 1 новость.

   >>> author_1 = Author.objects.get(id=3)
   >>> author_2 = Author.objects.get(id=4) 

   >>> Post.objects.create(author=author_1, category_type='AR', title='ARTICLE_1', text='TEXT_1')        
      <Post: Post object (1)>
   >>> Post.objects.create(author=author_1, category_type='AR', title='ARTICLE_2', text='TEXT_2') 
      <Post: Post object (2)>
   >>> Post.objects.create(author=author_2, category_type='NE', title='NEWS_1', text='TEXT_NEWS_1')
      <Post: Post object (3)>

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

   >>> PostCategory.objects.create(post=Post.objects.get(id=1), category=Category.objects.get(id=4)) 
      <PostCategory: PostCategory object (1)>
   >>> PostCategory.objects.create(post=Post.objects.get(id=1), category=Category.objects.get(id=2)) 
      <PostCategory: PostCategory object (2)>
   >>> Post.objects.get(id=2).category.add(Category.objects.get(id=1)) 
   >>> PostCategory.objects.create(post=Post.objects.get(id=2), category=Category.objects.get(id=4))
      <PostCategory: PostCategory object (4)>
   >>> PostCategory.objects.create(post=Post.objects.get(id=1), category=Category.objects.get(id=1))
      <PostCategory: PostCategory object (5)>
   >>> PostCategory.objects.create(post=Post.objects.get(id=3), category=Category.objects.get(id=3))
      <PostCategory: PostCategory object (6)>
   >>> Post.objects.get(id=3).category.add(Category.objects.get(id=2))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

   >>> Comment.objects.create(post=Post.objects.get(id=1), user=User.objects.get(id=5), text_comment='Comment_1') 
      <Comment: Comment object (1)>
   >>> Comment.objects.create(post=Post.objects.get(id=1), user=User.objects.get(id=6), text_comment='Comment_2') 
      <Comment: Comment object (2)>
   >>> Comment.objects.create(post=Post.objects.get(id=2), user=User.objects.get(id=6), text_comment='Comment_1') 
      <Comment: Comment object (3)>
   >>> Comment.objects.create(post=Post.objects.get(id=2), user=Author.objects.get(id=3).user, text_comment='Comment...')
      <Comment: Comment object (4)>
   >>> Comment.objects.create(post=Post.objects.get(id=3), user=User.objects.get(id=5), text_comment='Comment_1')         
      <Comment: Comment object (5)>

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

   >>> post_1 = Post.objects.get(id=1)
   >>> post_2 = Post.objects.get(id=2) 
   >>> post_3 = Post.objects.get(id=3) 

   >>> post_3.like()
   >>> post_3.like()
   >>> post_3.like()
   >>> post_3.dislike()
   >>> post_1.like()    
   >>> post_1.like()
   >>> post_1.like()
   >>> post_1.dislike()
   >>> post_1.like()    
   >>> post_2.like() 
   >>> post_2.dislike()
   >>> post_2.like()    
   >>> post_2.like()
   >>> post_2.like()

   >>> comment_1 = Comment.objects.get(id=1)
   >>> comment_2 = Comment.objects.get(id=2) 
   >>> comment_3 = Comment.objects.get(id=3) 
   >>> comment_4 = Comment.objects.get(id=4) 
   >>> comment_5 = Comment.objects.get(id=5) 

   >>> comment_1.like()
   >>> comment_1.like()
   >>> comment_1.dislike()
   >>> comment_1.dislike()
   >>> comment_1.like()    
   >>> comment_2.like() 
   >>> comment_2.like()
   >>> comment_2.like()
   >>> comment_2.like()
   >>> comment_2.like()
   >>> comment_3.like() 
   >>> comment_3.like()
   >>> comment_3.like()
   >>> comment_4.like() 
   >>> comment_4.dislike()
   >>> comment_4.like()    
   >>> comment_4.dislike()
   >>> comment_5.like()    
   >>> comment_5.like()

8. Обновить рейтинги пользователей.

   >>> author_1 = Author.objects.get(id=3) 
   >>> author_1.update_rating()           
   >>> author_2 = Author.objects.get(id=4) 
   >>> author_2.update_rating()  

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

   >>> m = Author.objects.order_by('-rating')[:1]  
   >>> for i in m:     
   ...     i.user.username
   ...     i.rating
   ... 
   'John'
   21

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

   >>> r = Post.objects.order_by('-post_rating')[:1] 
   >>> for i in r:
   ...     i.add_date_time
   ...     i.author.user.username
   ...     i.post_rating
   ...     i.title
   ...     i.preview()
   ... 
   datetime.datetime(2023, 3, 7, 20, 58, 10, 644791, tzinfo=datetime.timezone.utc)
   'John'
   3
   'ARTICLE_1'
   'TEXT_1 + ...'

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

   >>> r[0].comment_set.all().values('date_time', 'user__username', 'text_comment', 'comment_rating')

   <QuerySet [{'date_time': datetime.datetime(2023, 3, 7, 21, 45, 48, 436884, 
                tzinfo=datetime.timezone.utc), 
               'user__username': 'John', 
               'text_comment': 'Comment_1', 
               'comment_rating': 1},

 
              {'date_time': datetime.datetime(2023, 3, 7, 21, 49, 13, 20716, 
              tzinfo=datetime.timezone.utc), 
              'user__username': 'Anastasia', 
              'text_comment': 'Comment_2', 
              'comment_rating': 5}]>